#include <iostream>
#include "../lib/dll.hpp"

void TestDLList() {
    DLList<int> list;
    std::cout << "==============================\n";
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> PushBack: 1, 7, 9, 12" << std::endl;
    list.PushBack(1);
    list.PushBack(7);
    list.PushBack(9);
    list.PushBack(12);
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> PopFront" << std::endl;
    list.PopFront();
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> PopBack" << std::endl;
    list.PopBack();
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> PopBack" << std::endl;
    list.PopBack();
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> PopBack" << std::endl;
    list.PopBack();
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> PopBack (list is empty)" << std::endl;
    list.PopBack();
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> PopFront (list is empty)" << std::endl;
    list.PopBack();
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> PushFront: 1, 7, 9, 12, 17" << std::endl;
    list.PushFront(1);
    list.PushFront(7);
    list.PushFront(9);
    list.PushFront(12);
    list.PushFront(17);
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> PushFront: 1, PushBack: 9, 12" << std::endl;
    list.PushFront(1);
    list.PushBack(9);
    list.PushBack(12);
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    bool from_front_first = true;
    auto from_front = [&from_front_first](const DLLNode<int>* node) {
        if (!from_front_first) {
            std::cout << ", ";
        }
        from_front_first = false;
        std::cout << node->data;
        };
    bool from_back_first = true;
    auto from_back = [&from_back_first](const DLLNode<int>* node) {
        if (!from_back_first) {
            std::cout << ", ";
        }
        from_back_first = false;
        std::cout << node->data;
        };    
    std::cout << "> FromFront: ";
    list.FromFront(from_front);
    std::cout << std::endl;
    std::cout << "> FromBack: ";
    list.FromBack(from_back);
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
    std::cout << "> Clear" << std::endl;
    list.Clear();
    std::cout << "> Print: ";
    list.Print();
    std::cout << std::endl;
    std::cout << "> Back: " << list.Back()->data << std::endl;
    std::cout << "> Front: " << list.Front()->data << std::endl;
    std::cout << "> Size: " << list.Size() << std::endl;
    std::cout << "> Empty: " << (list.IsEmpty() ? "Yes" : "No") << std::endl;
    std::cout << "==============================\n";
}

int main() {
    TestDLList();
    return 0;
}